<?php

/**
 * @file
 * Install, update and uninstall functions for the uuid module.
 */

define('UUID_UPGRADE_VAR', 'uuid_upgrade_in_progress');

/**
 * Include some helper functions for the Entity API.
 */
module_load_include('inc', 'uuid', 'uuid.entity');

/**
 * Helper function that returns a schema field definition for UUID fields.
 *
 * @see uuid_schema_alter()
 * @see uuid_install()
 */
function uuid_schema_field_definition() {
  return array(
    'type' => 'char',
    'length' => 36,
    'not null' => TRUE,
    'default' => '',
    'description' => 'The Universally Unique Identifier.',
  );
}

/**
 * Implements hook_schema_alter().
 */
function uuid_schema_alter(array &$schema) {
  $field_info = uuid_schema_field_definition();
  $key_names = array(
    'base table' => 'uuid',
    'revision table' => 'revision uuid',
  );

  foreach (uuid_get_core_entity_info() as $entity_info) {
    foreach ($key_names as $table_type => $key_name) {
      if (isset($entity_info[$table_type], $entity_info['entity keys'][$key_name])) {
        $field_name = $entity_info['entity keys'][$key_name];
        $properties = array(
          'fields' => $field_info,
          'indexes' => array($field_name),
        );

        foreach ($properties as $property => $value) {
          $schema[$entity_info[$table_type]][$property][$field_name] = $value;
        }
      }
    }
  }
}

/**
 * Implements hook_install().
 */
function uuid_install() {
  _uuid_install_uuid_fields();
  module_load_include('inc', 'uuid');
  uuid_sync_all();
}

/**
 * Install the uuid and vuuid fields for Drupal core entity tables where needed.
 *
 * IMPORTANT:  This function is called both at install and update time.  If this
 * method is modified to add additional fields in the future, the update
 * strategy must be considered.  See the comment in uuid_update_7102.
 */
function _uuid_install_uuid_fields() {
  $field = uuid_schema_field_definition();
  foreach (uuid_get_core_entity_info() as $info) {
    if (!db_field_exists($info['base table'], $info['entity keys']['uuid'])) {
      db_add_field($info['base table'], $info['entity keys']['uuid'], $field);
      db_add_index($info['base table'], $info['entity keys']['uuid'], array($info['entity keys']['uuid']));
    }
    if (!empty($info['revision table']) && !empty($info['entity keys']['revision uuid'])) {
      if (!db_field_exists($info['revision table'], $info['entity keys']['revision uuid'])) {
        db_add_field($info['revision table'], $info['entity keys']['revision uuid'], $field);
        db_add_index($info['revision table'], $info['entity keys']['revision uuid'], array($info['entity keys']['revision uuid']));
      }
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function uuid_uninstall() {
  foreach (uuid_get_core_entity_info() as $info) {
    if (db_field_exists($info['base table'], $info['entity keys']['uuid'])) {
      db_drop_field($info['base table'], $info['entity keys']['uuid']);
      db_drop_index($info['base table'], $info['entity keys']['uuid']);
    }
    if (!empty($info['revision table']) && !empty($info['entity keys']['revision uuid'])) {
      if (db_field_exists($info['revision table'], $info['entity keys']['revision uuid'])) {
        db_drop_field($info['revision table'], $info['entity keys']['revision uuid']);
        db_drop_index($info['revision table'], $info['entity keys']['revision uuid']);
      }
    }
  }
}

/**
 * Implements hook_modules_installed().
 */
function uuid_modules_installed($modules) {
  // Run the installation hook. This makes sure that the schema for all
  // supported core entity types is set correct.
  uuid_install();
}

/**
 * Implements hook_update_last_removed().
 */
function uuid_update_last_removed() {
  return 7103;
}
